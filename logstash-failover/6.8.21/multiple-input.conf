input {
  elasticsearch {
    tags => ["message-failover-logstash"]

    # logstash client id (스케일 아웃시 번호 변경)
    id => "message-failover-logstash-1"

    # coordinating node ip
    hosts => "es01:9200"

    # elasticsearch index
    index => "message-producer-failover"

    # 쿼리 상세 설명
    # service == message-producer-api
    # severity == ERROR
    # 2분전 <= @timestamp < 1분전
    # field 중 message-producer-api.message가 존재
    # 1분당 1회 호출
    query => '
    {
      "query": {
        "bool": {
          "must": [
            {
              "match_phrase": {
                "service": {
                  "query": "message-producer-api"
                }
              }
            },
            {
              "match_phrase": {
                "severity": {
                  "query": "ERROR"
                }
              }
            },
            {
              "range": {
                "@timestamp": {
                  "gte": "now-2m/m",
                  "lt": "now-1m/m"
                }
              }
            },
            {
              "exists": {
                "field": "message-producer-api.message"
              }
            }
          ]
        }
      },
      "sort": [
        {
          "@timestamp": {
            "order": "asc"
          }
        }
      ]
    }
    '
    schedule => "*/1 * * * *"
  }

  elasticsearch {
    tags => ["deal-failover-logstash"]

    # logstash client id (스케일 아웃시 번호 변경)
    id => "deal-failover-logstash-1"

    # coordinating node ip
    hosts => "es01:9200"

    # elasticsearch index
    index => "message-producer-failover"

    # 쿼리 상세 설명
    # service == deal-api
    # severity == ERROR
    # 2분전 <= @timestamp < 1분전
    # field 중 deal-api.kafkaMessage가 존재
    # 1분당 1회 호출
    query => '
    {
      "query": {
        "bool": {
          "must": [
            {
              "match_phrase": {
                "service": {
                  "query": "deal-api"
                }
              }
            },
            {
              "match_phrase": {
                "severity": {
                  "query": "ERROR"
                }
              }
            },
            {
              "range": {
                "@timestamp": {
                  "gte": "now-2m/m",
                  "lt": "now-1m/m"
                }
              }
            },
            {
              "exists": {
                "field": "deal-api.kafkaMessage"
              }
            }
          ]
        }
      },
      "sort": [
        {
          "@timestamp": {
            "order": "asc"
          }
        }
      ]
    }
    '
    schedule => "*/1 * * * *"
  }
}

filter {
  if "message-failover-logstash" in [tags] {
    prune {
      # 정규식 패턴에 포함되는 필드만 사용
      whitelist_names => [
        "^message-producer-api.message$",
        "^message-producer-api.topicName$"
      ]
    }
    json {
      # message-producer-api.message 필드로 들어온 값을 json으로 변환
      source => "message-producer-api.message"

      # message-producer-api.message 필드 삭제
      remove_field => "message-producer-api.message"
    }
    mutate {
      # json 필드 추가
      add_field => { "dataKeyId" => "%{[dataKeyIdList][0]}" }

      # json 필드 삭제
      remove_field => [ "dataKeyIdList" ]

      # json 필드 이름 변경
      rename => {"message-producer-api.topicName" => "topicName"}
    }
  }

  if "deal-failover-logstash" in [tags] {
    prune {
      # 정규식 패턴에 포함되는 필드만 사용
      whitelist_names => [
        "^deal-api.kafkaMessage$"
      ]
    }
    json {
      # deal-api.kafkaMessage 필드로 들어온 값을 json으로 변환
      source => "deal-api.kafkaMessage"

      # deal-api.kafkaMessage 필드 삭제
      remove_field => "deal-api.kafkaMessage"
    }
    mutate {
      # json 필드 추가
      add_field => { "dataKeyId" => "%{[dataKeyIdList][0]}" }

      # json 필드 삭제
      remove_field => [ "dataKeyIdList" ]
    }
  }
}

output {
  stdout {
    # 디버깅
    codec => rubydebug
  }

  if "message-failover-logstash" in [tags] {
    kafka {
      # 출력 codec json으로 변경
      codec => json

      # kafka broker
      bootstrap_servers => "kafka:9092"

      # topic 이름
      topic_id => "%{topicName}"
    }
  }

  if "deal-failover-logstash" in [tags] {
    kafka {
      # 출력 codec json으로 변경
      codec => json

      # kafka broker
      bootstrap_servers => "kafka:9092"

      # topic 이름
      topic_id => "internal-product-search-queuing-json"
    }
  }
}
